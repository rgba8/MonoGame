// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace TwoMGFX
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public string CurrentFile;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, RegexWrapper> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped
        private readonly TokenType FileAndLine;

        public class RegexWrapper
        {
            Regex regex = null;
            Options options = Options.None;
            string pattern = string.Empty;
            Dictionary<string, bool> patterns = new Dictionary<string,bool>();
            string[] patternArray = null;
            int minLen = int.MaxValue;
            int maxLen = int.MinValue;
            public enum Options
            {
                None,
                IgnoreCase,
                Whitespace,
                Or,
            };

            public RegexWrapper(string pattern, RegexOptions options)
            {
                this.regex = new Regex(pattern, options);
            }

            public RegexWrapper(string pattern, Options options)
            {
                this.pattern = pattern;
                this.options = options;
            }

            public RegexWrapper(string[] patterns, Options options)
            {
                foreach (var pattern in patterns)
                {
                    minLen = Math.Min(minLen, pattern.Length);
                    maxLen = Math.Max(maxLen, pattern.Length);
                    this.patterns[pattern] = true;
                }
                this.patternArray = patterns;
                this.options = options;
            }

            public void Match(string input, TokenType scanToken, ref int len, ref TokenType index)
            {
                if (regex != null)
                {
                    Match m = regex.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length> len) || (scanToken < index && m.Length == len)))
                    {
                        len = m.Length;
                        index = scanToken;
                    }
                }
                else
                {
                    if (this.options == Options.None)
                    {
                        int patternLen = pattern.Length;
                        int inputLen = input.Length;
                        if (inputLen >= patternLen)
                        {
                            for (int i = 0; i < patternLen; ++i)
                            {
                                if (pattern[i] != input[i])
                                { return; }
                            }

                            if (patternLen > len || (scanToken < index && patternLen == len))
                            {
                                len = patternLen;
                                index = scanToken;
                            }
                        }
                    }
                    else if (this.options == Options.IgnoreCase)
                    {
                    }
                    else if (this.options == Options.Whitespace)
                    {
                        int whiteCount = 0;
                        while (whiteCount < input.Length)
                        {
                            char current = input[whiteCount];
                            if (current == ' ' ||
                                current == '\t' ||
                                current == '\n' ||
                                current == '\r')
                            {
                                ++whiteCount;
                            }
                            else
                            { break; }
                        }
                        if (whiteCount > 0)
                        {
                            len = whiteCount;
                            index = scanToken;
                        }
                    }
                    else if (this.options == Options.Or)
                    {
                        int count = this.patternArray.Length;
                        for (int i = 0; i < count; ++i)
                        {
                            string pattern = this.patternArray[i];

                            int patternLen = pattern.Length;
                            int inputLen = input.Length;
                            if (inputLen >= patternLen)
                            {
                                bool bContinue = false;
                                for (int p = 0; p < patternLen; ++p)
                                {
                                    if (pattern[p] != input[p])
                                    {
                                        bContinue = true;
                                        break;
                                    }
                                }

                                if (bContinue)
                                { continue; }

                                if (patternLen > len || (scanToken < index && patternLen == len))
                                {
                                    len = patternLen;
                                    index = scanToken;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        public Scanner()
        {
            RegexWrapper regex;
            Patterns = new Dictionary<TokenType, RegexWrapper>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.BlockComment);
            SkipList.Add(TokenType.Comment);
            SkipList.Add(TokenType.Whitespace);
            SkipList.Add(TokenType.LinePragma);
            FileAndLine = TokenType.LinePragma;

            regex = new RegexWrapper(@"/\*([^*]|\*[^/])*\*/", RegexOptions.Compiled);
            Patterns.Add(TokenType.BlockComment, regex);
            Tokens.Add(TokenType.BlockComment);

            regex = new RegexWrapper(@"//[^\n\r]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.Comment, regex);
            Tokens.Add(TokenType.Comment);

            regex = new RegexWrapper(@"[ \t\n\r]+", RegexWrapper.Options.Whitespace);
            Patterns.Add(TokenType.Whitespace, regex);
            Tokens.Add(TokenType.Whitespace);

            regex = new RegexWrapper(@"^[ \t]*#line[ \t]*(?<Line>\d*)[ \t]*(\""(?<File>[^\""\\]*(?:\\.[^\""\\]*)*)\"")?\n", RegexOptions.Compiled);
            Patterns.Add(TokenType.LinePragma, regex);
            Tokens.Add(TokenType.LinePragma);

            regex = new RegexWrapper(@"pass", RegexWrapper.Options.IgnoreCase);
            Patterns.Add(TokenType.Pass, regex);
            Tokens.Add(TokenType.Pass);

            regex = new RegexWrapper(@"technique", RegexWrapper.Options.IgnoreCase);
            Patterns.Add(TokenType.Technique, regex);
            Tokens.Add(TokenType.Technique);

            regex = new RegexWrapper(new string[] { @"sampler1D", @"sampler2D", @"sampler3D", @"samplerCUBE", @"SamplerState", @"sampler" }, RegexWrapper.Options.Or);
            Patterns.Add(TokenType.Sampler, regex);
            Tokens.Add(TokenType.Sampler);

            regex = new RegexWrapper(@"sampler_state", RegexWrapper.Options.IgnoreCase);
            Patterns.Add(TokenType.SamplerState, regex);
            Tokens.Add(TokenType.SamplerState);

            regex = new RegexWrapper(@"VertexShader", RegexWrapper.Options.IgnoreCase);
            Patterns.Add(TokenType.VertexShader, regex);
            Tokens.Add(TokenType.VertexShader);

            regex = new RegexWrapper(@"PixelShader", RegexWrapper.Options.None);
            Patterns.Add(TokenType.PixelShader, regex);
            Tokens.Add(TokenType.PixelShader);

            regex = new RegexWrapper(@"register", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Register, regex);
            Tokens.Add(TokenType.Register);

            regex = new RegexWrapper(@"true|false|0|1", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.Boolean, regex);
            Tokens.Add(TokenType.Boolean);

            regex = new RegexWrapper(@"[+-]? ?[0-9]?\.?[0-9]+[fF]?", RegexOptions.Compiled);
            Patterns.Add(TokenType.Number, regex);
            Tokens.Add(TokenType.Number);

            regex = new RegexWrapper(@"[A-Za-z_][A-Za-z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.Identifier, regex);
            Tokens.Add(TokenType.Identifier);

            regex = new RegexWrapper(@"{", RegexWrapper.Options.None);
            Patterns.Add(TokenType.OpenBracket, regex);
            Tokens.Add(TokenType.OpenBracket);

            regex = new RegexWrapper(@"}", RegexWrapper.Options.None);
            Patterns.Add(TokenType.CloseBracket, regex);
            Tokens.Add(TokenType.CloseBracket);

            regex = new RegexWrapper(@"=", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Equals, regex);
            Tokens.Add(TokenType.Equals);

            regex = new RegexWrapper(@":", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Colon, regex);
            Tokens.Add(TokenType.Colon);

            regex = new RegexWrapper(@",", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Comma, regex);
            Tokens.Add(TokenType.Comma);

            regex = new RegexWrapper(@";", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Semicolon, regex);
            Tokens.Add(TokenType.Semicolon);

            regex = new RegexWrapper(@"|", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Or, regex);
            Tokens.Add(TokenType.Or);

            regex = new RegexWrapper(@"(", RegexWrapper.Options.None);
            Patterns.Add(TokenType.OpenParenthesis, regex);
            Tokens.Add(TokenType.OpenParenthesis);

            regex = new RegexWrapper(@")", RegexWrapper.Options.None);
            Patterns.Add(TokenType.CloseParenthesis, regex);
            Tokens.Add(TokenType.CloseParenthesis);

            regex = new RegexWrapper(@"[", RegexWrapper.Options.None);
            Patterns.Add(TokenType.OpenSquareBracket, regex);
            Tokens.Add(TokenType.OpenSquareBracket);

            regex = new RegexWrapper(@"]", RegexWrapper.Options.None);
            Patterns.Add(TokenType.CloseSquareBracket, regex);
            Tokens.Add(TokenType.CloseSquareBracket);

            regex = new RegexWrapper(@"<", RegexWrapper.Options.None);
            Patterns.Add(TokenType.LessThan, regex);
            Tokens.Add(TokenType.LessThan);

            regex = new RegexWrapper(@">", RegexWrapper.Options.None);
            Patterns.Add(TokenType.GreaterThan, regex);
            Tokens.Add(TokenType.GreaterThan);

            regex = new RegexWrapper(@"compile", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Compile, regex);
            Tokens.Add(TokenType.Compile);

            regex = new RegexWrapper(@"[A-Za-z_][A-Za-z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.ShaderModel, regex);
            Tokens.Add(TokenType.ShaderModel);

            regex = new RegexWrapper(@"[\S]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.Code, regex);
            Tokens.Add(TokenType.Code);

            regex = new RegexWrapper(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EndOfFile, regex);
            Tokens.Add(TokenType.EndOfFile);

            regex = new RegexWrapper(@"MinFilter", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MinFilter, regex);
            Tokens.Add(TokenType.MinFilter);

            regex = new RegexWrapper(@"MagFilter", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MagFilter, regex);
            Tokens.Add(TokenType.MagFilter);

            regex = new RegexWrapper(@"MipFilter", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MipFilter, regex);
            Tokens.Add(TokenType.MipFilter);

            regex = new RegexWrapper(@"Filter", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Filter, regex);
            Tokens.Add(TokenType.Filter);

            regex = new RegexWrapper(@"Texture", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Texture, regex);
            Tokens.Add(TokenType.Texture);

            regex = new RegexWrapper(@"AddressU", RegexWrapper.Options.None);
            Patterns.Add(TokenType.AddressU, regex);
            Tokens.Add(TokenType.AddressU);

            regex = new RegexWrapper(@"AddressV", RegexWrapper.Options.None);
            Patterns.Add(TokenType.AddressV, regex);
            Tokens.Add(TokenType.AddressV);

            regex = new RegexWrapper(@"AddressW", RegexWrapper.Options.None);
            Patterns.Add(TokenType.AddressW, regex);
            Tokens.Add(TokenType.AddressW);

            regex = new RegexWrapper(@"MaxAnisotropy", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MaxAnisotropy, regex);
            Tokens.Add(TokenType.MaxAnisotropy);

            regex = new RegexWrapper(@"MaxMipLevel|MaxLod", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.MaxMipLevel, regex);
            Tokens.Add(TokenType.MaxMipLevel);

            regex = new RegexWrapper(@"MipLodBias", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MipLodBias, regex);
            Tokens.Add(TokenType.MipLodBias);

            regex = new RegexWrapper(@"Clamp", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Clamp, regex);
            Tokens.Add(TokenType.Clamp);

            regex = new RegexWrapper(@"Wrap", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Wrap, regex);
            Tokens.Add(TokenType.Wrap);

            regex = new RegexWrapper(@"Mirror", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Mirror, regex);
            Tokens.Add(TokenType.Mirror);

            regex = new RegexWrapper(@"None", RegexWrapper.Options.None);
            Patterns.Add(TokenType.None, regex);
            Tokens.Add(TokenType.None);

            regex = new RegexWrapper(@"Linear", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Linear, regex);
            Tokens.Add(TokenType.Linear);

            regex = new RegexWrapper(@"Point", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Point, regex);
            Tokens.Add(TokenType.Point);

            regex = new RegexWrapper(@"Anisotropic", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Anisotropic, regex);
            Tokens.Add(TokenType.Anisotropic);

            regex = new RegexWrapper(@"AlphaBlendEnable", RegexWrapper.Options.None);
            Patterns.Add(TokenType.AlphaBlendEnable, regex);
            Tokens.Add(TokenType.AlphaBlendEnable);

            regex = new RegexWrapper(@"SrcBlend", RegexWrapper.Options.None);
            Patterns.Add(TokenType.SrcBlend, regex);
            Tokens.Add(TokenType.SrcBlend);

            regex = new RegexWrapper(@"DestBlend", RegexWrapper.Options.None);
            Patterns.Add(TokenType.DestBlend, regex);
            Tokens.Add(TokenType.DestBlend);

            regex = new RegexWrapper(@"BlendOp", RegexWrapper.Options.None);
            Patterns.Add(TokenType.BlendOp, regex);
            Tokens.Add(TokenType.BlendOp);

            regex = new RegexWrapper(@"ColorWriteEnable", RegexWrapper.Options.None);
            Patterns.Add(TokenType.ColorWriteEnable, regex);
            Tokens.Add(TokenType.ColorWriteEnable);

            regex = new RegexWrapper(@"ZEnable", RegexWrapper.Options.None);
            Patterns.Add(TokenType.ZEnable, regex);
            Tokens.Add(TokenType.ZEnable);

            regex = new RegexWrapper(@"ZWriteEnable", RegexWrapper.Options.None);
            Patterns.Add(TokenType.ZWriteEnable, regex);
            Tokens.Add(TokenType.ZWriteEnable);

            regex = new RegexWrapper(@"DepthBias", RegexWrapper.Options.None);
            Patterns.Add(TokenType.DepthBias, regex);
            Tokens.Add(TokenType.DepthBias);

            regex = new RegexWrapper(@"CullMode", RegexWrapper.Options.None);
            Patterns.Add(TokenType.CullMode, regex);
            Tokens.Add(TokenType.CullMode);

            regex = new RegexWrapper(@"FillMode", RegexWrapper.Options.None);
            Patterns.Add(TokenType.FillMode, regex);
            Tokens.Add(TokenType.FillMode);

            regex = new RegexWrapper(@"MultiSampleAntiAlias", RegexWrapper.Options.None);
            Patterns.Add(TokenType.MultiSampleAntiAlias, regex);
            Tokens.Add(TokenType.MultiSampleAntiAlias);

            regex = new RegexWrapper(@"SlopeScaleDepthBias", RegexWrapper.Options.None);
            Patterns.Add(TokenType.SlopeScaleDepthBias, regex);
            Tokens.Add(TokenType.SlopeScaleDepthBias);

            regex = new RegexWrapper(@"Red", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Red, regex);
            Tokens.Add(TokenType.Red);

            regex = new RegexWrapper(@"Green", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Green, regex);
            Tokens.Add(TokenType.Green);

            regex = new RegexWrapper(@"Blue", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Blue, regex);
            Tokens.Add(TokenType.Blue);

            regex = new RegexWrapper(@"Alpha", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Alpha, regex);
            Tokens.Add(TokenType.Alpha);

            regex = new RegexWrapper(@"All", RegexWrapper.Options.None);
            Patterns.Add(TokenType.All, regex);
            Tokens.Add(TokenType.All);

            regex = new RegexWrapper(@"Cw", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Cw, regex);
            Tokens.Add(TokenType.Cw);

            regex = new RegexWrapper(@"Ccw", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Ccw, regex);
            Tokens.Add(TokenType.Ccw);

            regex = new RegexWrapper(@"Solid", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Solid, regex);
            Tokens.Add(TokenType.Solid);

            regex = new RegexWrapper(@"WireFrame", RegexWrapper.Options.None);
            Patterns.Add(TokenType.WireFrame, regex);
            Tokens.Add(TokenType.WireFrame);

            regex = new RegexWrapper(@"Add", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Add, regex);
            Tokens.Add(TokenType.Add);

            regex = new RegexWrapper(@"Subtract", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Subtract, regex);
            Tokens.Add(TokenType.Subtract);

            regex = new RegexWrapper(@"RevSubtract", RegexWrapper.Options.None);
            Patterns.Add(TokenType.RevSubtract, regex);
            Tokens.Add(TokenType.RevSubtract);

            regex = new RegexWrapper(@"Min", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Min, regex);
            Tokens.Add(TokenType.Min);

            regex = new RegexWrapper(@"Max", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Max, regex);
            Tokens.Add(TokenType.Max);

            regex = new RegexWrapper(@"Zero", RegexWrapper.Options.None);
            Patterns.Add(TokenType.Zero, regex);
            Tokens.Add(TokenType.Zero);

            regex = new RegexWrapper(@"One", RegexWrapper.Options.None);
            Patterns.Add(TokenType.One, regex);
            Tokens.Add(TokenType.One);

            regex = new RegexWrapper(@"SrcColor", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.SrcColor, regex);
            Tokens.Add(TokenType.SrcColor);

            regex = new RegexWrapper(@"InvSrcColor", RegexWrapper.Options.None);
            Patterns.Add(TokenType.InvSrcColor, regex);
            Tokens.Add(TokenType.InvSrcColor);

            regex = new RegexWrapper(@"SrcAlpha", RegexWrapper.Options.None);
            Patterns.Add(TokenType.SrcAlpha, regex);
            Tokens.Add(TokenType.SrcAlpha);

            regex = new RegexWrapper(@"InvSrcAlpha", RegexWrapper.Options.None);
            Patterns.Add(TokenType.InvSrcAlpha, regex);
            Tokens.Add(TokenType.InvSrcAlpha);

            regex = new RegexWrapper(@"DestAlpha", RegexWrapper.Options.None);
            Patterns.Add(TokenType.DestAlpha, regex);
            Tokens.Add(TokenType.DestAlpha);

            regex = new RegexWrapper(@"InvDestAlpha", RegexWrapper.Options.None);
            Patterns.Add(TokenType.InvDestAlpha, regex);
            Tokens.Add(TokenType.InvDestAlpha);

            regex = new RegexWrapper(@"DestColor", RegexWrapper.Options.None);
            Patterns.Add(TokenType.DestColor, regex);
            Tokens.Add(TokenType.DestColor);

            regex = new RegexWrapper(@"InvDestColor", RegexWrapper.Options.None);
            Patterns.Add(TokenType.InvDestColor, regex);
            Tokens.Add(TokenType.InvDestColor);

            regex = new RegexWrapper(@"SrcAlphaSat", RegexWrapper.Options.None);
            Patterns.Add(TokenType.SrcAlphaSat, regex);
            Tokens.Add(TokenType.SrcAlphaSat);

            regex = new RegexWrapper(@"BlendFactor", RegexWrapper.Options.None);
            Patterns.Add(TokenType.BlendFactor, regex);
            Tokens.Add(TokenType.BlendFactor);

            regex = new RegexWrapper(@"InvBlendFactor", RegexWrapper.Options.None);
            Patterns.Add(TokenType.InvBlendFactor, regex);
            Tokens.Add(TokenType.InvBlendFactor);


        }

        public void Init(string input)
        {
            Init(input, "");
        }

        public void Init(string input, string fileName)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentFile = fileName;
            CurrentLine = 1;
            CurrentColumn = 1;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            CurrentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
            CurrentFile = tok.File;
            return tok;
        }


        public static Dictionary<TokenType, int> hitCount = new Dictionary<TokenType, int>();

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            int endpos = EndPos;
            int currentline = CurrentLine;
            string currentFile = CurrentFile;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, endpos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    if (hitCount.ContainsKey(scantokens[i]) == false)
                    {
                        hitCount[scantokens[i]] = 0;
                    }
                    else
                    {
                        ++hitCount[scantokens[i]];
                    }
                    RegexWrapper r = Patterns[scantokens[i]];
                    r.Match(input, scantokens[i], ref len, ref index);
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos == tok.EndPos)
                {
                    if (tok.StartPos < Input.Length)
                        tok.Text = Input.Substring(tok.StartPos, 1);
                    else
                        tok.Text = "EOF";
                }

                // Update the line and column count for error reporting.
                tok.File = currentFile;
                tok.Line = currentline;
                if (tok.StartPos < Input.Length)
                    tok.Column = tok.StartPos - Input.LastIndexOf('\n', tok.StartPos);

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    endpos = tok.EndPos;
                    currentline = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
                    currentFile = tok.File;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }

                // Check to see if the parsed token wants to 
                // alter the file and line number.
                if (tok.Type == FileAndLine)
                {
                    /*var match = Patterns[tok.Type].Match(tok.Text);
                    var fileMatch = match.Groups["File"];
                    if (fileMatch.Success)
                        currentFile = fileMatch.Value.Replace("\\\\", "\\");
                    var lineMatch = match.Groups["Line"];
                    if (lineMatch.Success)
                        currentline = int.Parse(lineMatch.Value, NumberStyles.Integer, CultureInfo.InvariantCulture);*/
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            Start   = 2,
            Technique_Declaration= 3,
            FillMode_Solid= 4,
            FillMode_WireFrame= 5,
            FillModes= 6,
            CullMode_None= 7,
            CullMode_Cw= 8,
            CullMode_Ccw= 9,
            CullModes= 10,
            Colors_None= 11,
            Colors_Red= 12,
            Colors_Green= 13,
            Colors_Blue= 14,
            Colors_Alpha= 15,
            Colors_All= 16,
            Colors_Boolean= 17,
            Colors  = 18,
            ColorsMasks= 19,
            Blend_Zero= 20,
            Blend_One= 21,
            Blend_SrcColor= 22,
            Blend_InvSrcColor= 23,
            Blend_SrcAlpha= 24,
            Blend_InvSrcAlpha= 25,
            Blend_DestAlpha= 26,
            Blend_InvDestAlpha= 27,
            Blend_DestColor= 28,
            Blend_InvDestColor= 29,
            Blend_SrcAlphaSat= 30,
            Blend_BlendFactor= 31,
            Blend_InvBlendFactor= 32,
            Blends  = 33,
            BlendOp_Add= 34,
            BlendOp_Subtract= 35,
            BlendOp_RevSubtract= 36,
            BlendOp_Min= 37,
            BlendOp_Max= 38,
            BlendOps= 39,
            Render_State_CullMode= 40,
            Render_State_FillMode= 41,
            Render_State_AlphaBlendEnable= 42,
            Render_State_SrcBlend= 43,
            Render_State_DestBlend= 44,
            Render_State_BlendOp= 45,
            Render_State_ColorWriteEnable= 46,
            Render_State_DepthBias= 47,
            Render_State_SlopeScaleDepthBias= 48,
            Render_State_ZEnable= 49,
            Render_State_ZWriteEnable= 50,
            Render_State_MultiSampleAntiAlias= 51,
            Render_State_Expression= 52,
            Pass_Declaration= 53,
            VertexShader_Pass_Expression= 54,
            PixelShader_Pass_Expression= 55,
            AddressMode_Clamp= 56,
            AddressMode_Wrap= 57,
            AddressMode_Mirror= 58,
            AddressMode= 59,
            TextureFilter_None= 60,
            TextureFilter_Linear= 61,
            TextureFilter_Point= 62,
            TextureFilter_Anisotropic= 63,
            TextureFilter= 64,
            Sampler_State_Texture= 65,
            Sampler_State_MinFilter= 66,
            Sampler_State_MagFilter= 67,
            Sampler_State_MipFilter= 68,
            Sampler_State_Filter= 69,
            Sampler_State_AddressU= 70,
            Sampler_State_AddressV= 71,
            Sampler_State_AddressW= 72,
            Sampler_State_MaxMipLevel= 73,
            Sampler_State_MaxAnisotropy= 74,
            Sampler_State_MipLodBias= 75,
            Sampler_State_Expression= 76,
            Sampler_Register_Expression= 77,
            Sampler_Declaration= 78,

            //Terminal tokens:
            BlockComment= 79,
            Comment = 80,
            Whitespace= 81,
            LinePragma= 82,
            Pass    = 83,
            Technique= 84,
            Sampler = 85,
            SamplerState= 86,
            VertexShader= 87,
            PixelShader= 88,
            Register= 89,
            Boolean = 90,
            Number  = 91,
            Identifier= 92,
            OpenBracket= 93,
            CloseBracket= 94,
            Equals  = 95,
            Colon   = 96,
            Comma   = 97,
            Semicolon= 98,
            Or      = 99,
            OpenParenthesis= 100,
            CloseParenthesis= 101,
            OpenSquareBracket= 102,
            CloseSquareBracket= 103,
            LessThan= 104,
            GreaterThan= 105,
            Compile = 106,
            ShaderModel= 107,
            Code    = 108,
            EndOfFile= 109,
            MinFilter= 110,
            MagFilter= 111,
            MipFilter= 112,
            Filter  = 113,
            Texture = 114,
            AddressU= 115,
            AddressV= 116,
            AddressW= 117,
            MaxAnisotropy= 118,
            MaxMipLevel= 119,
            MipLodBias= 120,
            Clamp   = 121,
            Wrap    = 122,
            Mirror  = 123,
            None    = 124,
            Linear  = 125,
            Point   = 126,
            Anisotropic= 127,
            AlphaBlendEnable= 128,
            SrcBlend= 129,
            DestBlend= 130,
            BlendOp = 131,
            ColorWriteEnable= 132,
            ZEnable = 133,
            ZWriteEnable= 134,
            DepthBias= 135,
            CullMode= 136,
            FillMode= 137,
            MultiSampleAntiAlias= 138,
            SlopeScaleDepthBias= 139,
            Red     = 140,
            Green   = 141,
            Blue    = 142,
            Alpha   = 143,
            All     = 144,
            Cw      = 145,
            Ccw     = 146,
            Solid   = 147,
            WireFrame= 148,
            Add     = 149,
            Subtract= 150,
            RevSubtract= 151,
            Min     = 152,
            Max     = 153,
            Zero    = 154,
            One     = 155,
            SrcColor= 156,
            InvSrcColor= 157,
            SrcAlpha= 158,
            InvSrcAlpha= 159,
            DestAlpha= 160,
            InvDestAlpha= 161,
            DestColor= 162,
            InvDestColor= 163,
            SrcAlphaSat= 164,
            BlendFactor= 165,
            InvBlendFactor= 166
    }

    public class Token
    {
        private string file;
        private int line;
        private int column;
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public string File { 
            get { return file; } 
            set { file = value; }
        }

        public int Line { 
            get { return line; } 
            set { line = value; }
        }

        public int Column {
            get { return column; } 
            set { column = value; }
        }

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
